From b6cb36c9d84bd386c500eb28f52948289fd73f5f Mon Sep 17 00:00:00 2001
From: Eldar Abusalimov <eldar.abusalimov@jetbrains.com>
Date: Wed, 3 Oct 2018 12:47:20 +0300
Subject: [PATCH] gdbserver: Output PID right after create_inferior () call

Instead of doing so from inside post_fork_inferior (), which is only invoked
on Linux and several more OS', print PID unconditionally so that the
behaviour is consistent across the platforms.


diff --git a/gdbserver/fork-child.cc b/gdbserver/fork-child.cc
index e791a8d..7e153cf 100644
--- a/gdbserver/fork-child.cc
+++ b/gdbserver/fork-child.cc
@@ -124,6 +124,4 @@ post_fork_inferior (int pid, const char *program)
   current_thread->last_status = cs.last_status;
   signal_pid = pid;
   target_post_create_inferior ();
-  fprintf (stderr, "Process %s created; pid = %d\n", program, pid);
-  fflush (stderr);
 }
diff --git a/gdbserver/server.cc b/gdbserver/server.cc
index d802e8b..594b818 100644
--- a/gdbserver/server.cc
+++ b/gdbserver/server.cc
@@ -295,6 +295,18 @@ get_environ ()
   return &our_environ;
 }
 
+static int
+do_target_create_inferior (const char *program,
+                    const std::vector<char *> &program_args)
+{
+  int pid = target_create_inferior (program, program_args);
+
+  fprintf (stderr, "Process %s created; pid = %d\n", program, pid);
+  fflush (stderr);
+
+  return pid;
+}
+
 static int
 attach_inferior (int pid)
 {
@@ -1619,7 +1631,7 @@ handle_qxfer_statictrace (const char *annex,
   if (writebuf != NULL)
     return -2;
 
-  if (annex[0] != '\0' || current_thread == NULL 
+  if (annex[0] != '\0' || current_thread == NULL
       || cs.current_traceframe == -1)
     return -1;
 
@@ -2983,7 +2995,7 @@ handle_v_run (char *own_buf)
   char *p, *next_p;
   std::vector<char *> new_argv;
   char *new_program_name = NULL;
-  int i;
+  int i, pid;
 
   for (i = 0, p = own_buf + strlen ("vRun;"); *p; p = next_p, ++i)
     {
@@ -3076,7 +3088,7 @@ handle_v_run (char *own_buf)
   free_vector_argv (program_args);
   program_args = new_argv;
 
-  target_create_inferior (program_path.get (), program_args);
+  do_target_create_inferior (program_path.get (), program_args);
 
   if (cs.last_status.kind () == TARGET_WAITKIND_STOPPED)
     {
@@ -3932,7 +3944,7 @@ captured_main (int argc, char *argv[])
 	program_args.push_back (xstrdup (next_arg[i]));
 
       /* Wait till we are at first instruction in program.  */
-      target_create_inferior (program_path.get (), program_args);
+      do_target_create_inferior (program_path.get (), program_args);
 
       /* We are now (hopefully) stopped at the first instruction of
 	 the target process.  This assumes that the target process was
@@ -4449,7 +4461,7 @@ process_serial_event (void)
 	  /* Wait till we are at 1st instruction in prog.  */
 	  if (program_path.get () != NULL)
 	    {
-	      target_create_inferior (program_path.get (), program_args);
+	      do_target_create_inferior (program_path.get (), program_args);
 
 	      if (cs.last_status.kind () == TARGET_WAITKIND_STOPPED)
 		{
