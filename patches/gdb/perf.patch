From 82392488a409cc79f4ca14e975bb9bbe0eeeada5 Mon Sep 17 00:00:00 2001
From: Dmitry Neverov <dmitry.neverov@jetbrains.com>
Date: Tue, 14 May 2024 17:28:39 +0200
Subject: [PATCH] fix for https://sourceware.org/bugzilla/show_bug.cgi?id=30520

---
 gdb/dwarf2/read.c | 57 ++++++++++++++++++++++++++++++++++++++---------
 1 file changed, 47 insertions(+), 10 deletions(-)

diff --git a/gdb/dwarf2/read.c b/gdb/dwarf2/read.c
index 5bbc8e24cf9..e70d4303d41 100644
--- a/gdb/dwarf2/read.c
+++ b/gdb/dwarf2/read.c
@@ -16881,13 +16881,26 @@ cooked_index_functions::expand_symtabs_matching
     language_ada
   };
 
+  symbol_name_match_type match_type
+    = lookup_name_without_params.match_type ();
+
   for (enum language lang : unique_styles)
     {
       std::vector<gdb::string_view> name_vec
 	= lookup_name_without_params.split_name (lang);
-      std::string last_name = gdb::to_string (name_vec.back ());
+      std::vector<std::string> name_str_vec (name_vec.begin (), name_vec.end ());
+      std::vector<lookup_name_info> segment_lookup_names;
+      segment_lookup_names.reserve (name_vec.size ());
+      for (auto &segment_name : name_str_vec)
+	{
+	  /* We use symbol_name_match_type::FULL rather than SEARCH_NAME
+	     to demangle the name in c++. See
+	     demangle_for_lookup_info::demangle_for_lookup_info. */
+	  segment_lookup_names.emplace_back (segment_name,
+	    symbol_name_match_type::FULL, completing, true);
+	}
 
-      for (const cooked_index_entry *entry : table->find (last_name,
+      for (const cooked_index_entry *entry : table->find (name_str_vec.back (),
 							  completing))
 	{
 	  QUIT;
@@ -16917,13 +16930,25 @@ cooked_index_functions::expand_symtabs_matching
 	    {
 	      /* If we ran out of entries, or if this segment doesn't
 		 match, this did not match.  */
-	      if (parent == nullptr
-		  || strncmp (parent->name, name_vec[i - 1].data (),
-			      name_vec[i - 1].length ()) != 0)
+	      if (parent == nullptr)
 		{
 		  found = false;
 		  break;
 		}
+	      enum language parent_lang = parent->per_cu->lang (false);
+	      if (parent_lang != language_unknown)
+		{
+		  const language_defn *lang_def = language_def (parent_lang);
+		  symbol_name_matcher_ftype *name_matcher
+		    = lang_def->get_symbol_name_matcher
+		      (segment_lookup_names[i-1]);
+		  if (!name_matcher (parent->canonical,
+				     segment_lookup_names[i-1], nullptr))
+		    {
+		      found = false;
+		      break;
+		    }
+		}
 
 	      parent = parent->parent_entry;
 	    }
@@ -16935,13 +16960,25 @@ cooked_index_functions::expand_symtabs_matching
 	     "x::a::b".  */
 	  if (symbol_matcher == nullptr)
 	    {
-	      symbol_name_match_type match_type
-		= lookup_name_without_params.match_type ();
 	      if ((match_type == symbol_name_match_type::FULL
 		   || (lang != language_ada
-		       && match_type == symbol_name_match_type::EXPRESSION))
-		  && parent != nullptr)
-		continue;
+		       && match_type == symbol_name_match_type::EXPRESSION)))
+		{
+		  if (parent != nullptr)
+		    continue;
+
+		  enum language entry_lang = entry->per_cu->lang (false);
+		  if (entry_lang != language_unknown)
+		    {
+		      const language_defn *lang_def = language_def (entry_lang);
+		      symbol_name_matcher_ftype *name_matcher
+			= lang_def->get_symbol_name_matcher
+			  (segment_lookup_names.back ());
+		      if (!name_matcher (entry->canonical,
+					 segment_lookup_names.back (), nullptr))
+			continue;
+		    }
+	      }
 	    }
 	  else
 	    {
-- 
2.40.1

