PREFIX=${PREFIX-/linux}

CARCH=${CARCH-aarch64}
CHOST=${CHOST-aarch64-redhat-linux}

source $(dirname ${BASH_SOURCE})/../makepkg.conf.inc

BUILDENV+=(ccache)
OPTIONS+=(libtool !staticlibs !emptydirs debug)

# We're going to replace the path below with '$ORIGIN',
# and we need to be sure there's enough room for that string.
# On the other hand, we need to provide a sane value right now
# in order to let PKGBUILD scripts execute newly compiled binaries
# before they are installed with the proper RPATH.
rpath_placeholder="${PREFIX}/lib:@ORIGIN/../lib"
LDFLAGS="-Wl,-O1,--sort-common,--as-needed,-z,relro -Wl,-rpath='${rpath_placeholder}'"
CFLAGS="-march=armv8-a -mtune=generic -O2 -pipe -fstack-protector-strong"
CXXFLAGS="$CFLAGS"

save_function() {
    local orig_func newname_func
    orig_func=$(declare -f $1) || return $?
    newname_func="$2${orig_func#$1}"
    eval "$newname_func"
}

if save_function tidy_install tidy_install_original; then
    tidy_install() {
        tidy_install_original  # does cd into $pkgdir
        tidy_unsymlink
        tidy_chrpath
    }
fi

get_soname() {
    local objdump
    objdump=$(which ${CHOST:+${CHOST}-}objdump 2>/dev/null) \
        || objdump=$(which objdump) \
        || return 1

    soname="$("${objdump}" -p "${1}" | sed -ne 's/ *SONAME *//p' | head -1)"
    if [[ -z "${soname}" ]]; then
        soname="$(libso_parse "${target}")"
    fi
    [[ -n "${soname}" ]] || return 1

    echo "${soname}"
    return 0
}

libso_parse() {
    if [[ "$(basename "${1}")" =~ (lib.*\.so)(\.[0-9]+)* ]]; then
        echo "${BASH_REMATCH[1]}"
        return 0
    fi
    return 1
}

read_immediate_link() {
    local symlink="${1}"
    local linkrel="$(readlink "${symlink}")"
    # follow single symlink
    (
        set -e
        cd "$(dirname "${symlink}")"
        test -f "${linkrel}"
        cd "$(dirname "${linkrel}")"

        [[ "${PWD}" != / ]] || PWD=""
        echo "${PWD}/$(basename "${linkrel}")"
    ) || return 1
}

tidy_unsymlink() {
    msg2 "$(gettext "Fixing up shared library symlinks...")"

    declare -A target_to_soname
    declare -A symlink_to_target
    local symlink target imm_target
    local sofile soname linksoname linksofile
    local dir="$(pwd)"

    while read -rd '' symlink ; do
        target=$(readlink -e "${symlink}") || continue
        [[ "${target}" == "${dir}"${PREFIX}/lib/* ]] || continue

        if [[ -z "${target_to_soname[${target}]+_}" ]]; then
            if [[ "$(file -bi "${target}")" != *application/x-sharedlib* ]]; then
                continue
            fi
            soname="$(get_soname "${target}")" || continue
            target_to_soname[${target}]="${soname}"
        fi
        symlink_to_target[${symlink}]="${target}"
    done < <(find -L "${dir}"${PREFIX}/lib -type f -xtype l -perm -u+w -print0 2>/dev/null)

    for target in "${!target_to_soname[@]}"; do
        soname="${target_to_soname[${target}]}"             # libfoo.so.1
        sofile="$(dirname "${target}")/${soname}"           # /path/to/libfoo.so.1
        [[ "${target}" != "${sofile}" ]] || continue

        linksoname="$(libso_parse "${soname}")"             # libfoo.so
        linksofile="$(dirname "${target}")/${linksoname}"   # /path/to/libfoo.so

        # mv: libfoo.so.1.2.3 -> libfoo.so.1
        echo "mv: (soname) $(mv -vf "${target#${dir}/}" "${sofile#${dir}/}")"

        if [[ "${target}" != "${sofile}"* ]]; then
            # ln: alien.so -> libfoo.so.1 (used to link to libfoo.so.1.2.3)
            echo "ln: (fixup)  $(ln -sTvf "${soname}" "${target#${dir}/}")"
        fi

        if [[ "${sofile}" != "${linksofile}" ]]; then
            # ln: libfoo.so -> libfoo.so.1
            echo "ln: (solink) $(ln -sTvf "${soname}" "${linksofile#${dir}/}")"
        fi
    done

    for symlink in "${!symlink_to_target[@]}"; do
        target="${symlink_to_target[${symlink}]}"
        soname="${target_to_soname[${target}]}"             # libfoo.so.1
        sofile="$(dirname "${target}")/${soname}"           # /path/to/libfoo.so.1
        [[ "${target}" != "${sofile}" ]] || continue
        [[ "${symlink}" != "${sofile}" ]] || continue

        if [[ "${symlink}" != "${sofile}"* ]]; then
            imm_target="$(read_immediate_link "${symlink}")" || imm_target="${target}"

            if [[ "${imm_target}" == "${target}" ]]; then
                local linkrel="$(dirname "$(readlink "${symlink}")")/${soname}"
                echo "ln: (fixup)  $(ln -sTvf "${linkrel#./}" "${symlink#${dir}/}")"
            fi
        else
            # rm libfoo.so.1.2
            rm -vf "${symlink#${dir}/}"
        fi
    done

    msg2 "$(gettext "Checking symlinks...")"

    while read -rd '' symlink ; do
        imm_target="\`$(readlink "${symlink}")'"
        if target=$(readlink -e "${symlink}"); then
            target="=> \`${target#${dir}/}'"
        else
            target=": not found"
        fi
        echo "readlink -e: \`${symlink#${dir}/}' -> ${imm_target} ${target}"
    done < <(find -L "${dir}"${PREFIX}/lib -type f -xtype l -perm -u+w -print0 2>/dev/null)
}

tidy_chrpath() {
    msg2 "$(gettext "Patching RPATH of binaries and libraries...")"

    local binary
    find . -type f -perm -u+w -print0 2>/dev/null | while read -rd '' binary ; do
        case "$(file -bi "$binary")" in
            *application/x-sharedlib*) ;;  # Libraries (.so)
            *application/x-executable*) ;; # Binaries
            *)
                continue ;;
        esac
        local rpath_line old_rpath new_rpath
        rpath_line=$(chrpath -l "$binary" 2>/dev/null) || continue
        old_rpath="${rpath_line#*: RPATH=}"
        new_rpath="${old_rpath//${rpath_placeholder}/\$ORIGIN/../lib}"
        # binaries built with CMake often have '$ORIGIN/../lib' rpath set already
        new_rpath="${new_rpath//'$ORIGIN/../lib:$ORIGIN/../lib:'/\$ORIGIN/../lib:}"
        new_rpath="${new_rpath/%'$ORIGIN/../lib:$ORIGIN/../lib'/\$ORIGIN/../lib}"
        if [[ "${new_rpath}" == "${old_rpath}" ]]; then
            continue
        fi
        chrpath -r "${new_rpath}" "${binary#./}" | grep "new RPATH"
    done
}

