# Eldar Abusalimov <Eldar.Abusalimov@jetbrains.com>
#
# This work is derived from the Arch Linux packaging project.
#
# Maintainer: Evangelos Foutras <evangelos@foutrelis.com>
# Contributor: Jan "heftig" Steffens <jan.steffens@gmail.com>
# Contributor: Sebastian Nowicki <sebnow@gmail.com>
# Contributor: Devin Cofer <ranguvar{AT]archlinux[DOT}us>
# Contributor: Tobias Kieslich <tobias@justdreams.de>
# Contributor: Geoffroy Carrier <geoffroy.carrier@aur.archlinux.org>
# Contributor: Tomas Lindquist Olsen <tomas@famolsen.dk>
# Contributor: Roberto Alsina <ralsina@kde.org>
# Contributor: Gerardo Exequiel Pozzi <vmlinuz386@yahoo.com.ar>

_llvm_repository_name='llvm-project'
_llvm_git_repository=${LLVM_GIT_REPOSITORY-"git+ssh://git@git.jetbrains.team/llvm/llvm-project.git"}
_llvm_git_reftype=${LLVM_GIT_REFTYPE-'branch'}
_llvm_git_ref=${LLVM_GIT_REF-'rust-lldb-15'}

pkgname=lldb
pkgver=rust.lldb.15.023ca6547ee9
pkgrel=1
pkgdesc="Next generation, high-performance debugger"
arch=(aarch64 i686 x86_64)
url="http://lldb.llvm.org/"
license=('custom:University of Illinois/NCSA Open Source License')
# makedepends=('cmake' 'libffi' 'python2' "ocaml=$_ocaml_ver" 'python-sphinx'
#              'ocaml-ctypes' 'ocaml-findlib' 'libedit' 'swig')
# depends=('llvm-libs' 'libxml2' 'python2' 'python2-six')
# depends=('gcc-libs' 'zlib' 'libffi' 'libedit' 'ncurses')
makedepends=('python' 'swig' 'libxml2' 'xz')
depends=(zlib python libxml2 xz)
options=(!staticlibs !debug)

source=("$_llvm_repository_name::$_llvm_git_repository#$_llvm_git_reftype=$_llvm_git_ref"
        '0001-build-Disable-SOVERSION-for-liblldb.so.patch'
        '0002-Allow-Python-to-find-its-home-when-relocated.patch'
        '0003-python-Make-compatible-with-Python-3-w.r.t.-integer-.patch')

sha256sums=('SKIP'
            'b00f39b06ad8041b7043ec277f3932aac7a9ddd3c5c095ca2954c02415954d6c'
            '223e24223df759a86b2c3a886377438e69f5191237150a4911127bd68211e2cf'
            '88e5e4b65bcf05d59de1a136236e71de44c72c46c260aa63558f6122772bd8e1')

pkgver() {
  cd "$srcdir/$_llvm_repository_name"

  if [ "$_llvm_git_reftype" == "branch" ]; then
    printf '%s.%s' "$_llvm_git_ref" "$(git rev-parse --short HEAD)"
  elif [ "$_llvm_git_reftype" == "commit" ]; then
    git rev-parse --short HEAD
  else # tag
    echo "$_llvm_git_ref"
  fi | sed 's/[^a-z0-9]/./gI'
}

prepare() {
  cd "$srcdir/$_llvm_repository_name/lldb"
  patch -p1 -i "${srcdir}/0001-build-Disable-SOVERSION-for-liblldb.so.patch"
  patch -p1 -i "${srcdir}/0002-Allow-Python-to-find-its-home-when-relocated.patch"
  patch -p1 -i "${srcdir}/0003-python-Make-compatible-with-Python-3-w.r.t.-integer-.patch"
}

_llvm_pkgversion() {
  echo "LLVM${PKGVERSION:+; ${PKGVERSION}}"
}

_cmake_escape_semicolon() {
  sed 's/;/\\;/g'
}

build() {
  mkdir -p "${srcdir}"/build-${CHOST}
  cd "${srcdir}"/build-${CHOST}

  # we don't need pip for the bundled python, but need some python packages for builds and tests
  # so let's download needed packages via system python and add them to PYTHONPATH for bundled one
  pip_packages_dir=$PWD/python_packages
  bundle_python=$PREFIX/bin/python
  bundle_python_version=$("$bundle_python" -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")

  # packaging: for lldb build
  pip_packages=('packaging')
  if [ -n "$CIDR_TEST_XML" ]; then
    # psutil: for llvm test timeouts
    # pexpect ptyprocess: for lldb tests
    pip_packages+=('psutil' 'pexpect' 'ptyprocess') # psutil: for llvm test timeouts
  fi

  python3.13 -m pip download "${pip_packages[@]}" --python-version "$bundle_python_version" \
    --only-binary=:all: --dest "$pip_packages_dir"
  python3.13 -m pip install "$pip_packages_dir/"*.whl --target "$pip_packages_dir"

  export PYTHONPATH="$pip_packages_dir:$PYTHONPATH"

  CFLAGS="${CPPFLAGS} ${CFLAGS}" \
  CXXFLAGS="${CPPFLAGS} ${CXXFLAGS}" \
  cmake -GNinja \
    -DCMAKE_VERBOSE_MAKEFILE=TRUE \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=${PREFIX} \
    -DPython3_EXECUTABLE="$bundle_python" \
    -DLLVM_ENABLE_PROJECTS="clang;lldb" \
    -DLLVM_TARGETS_TO_BUILD="$(if [ "$CARCH" == "aarch64" ]; then echo AArch64; else echo X86; fi)" \
    -DLLDB_ENABLE_LIBEDIT=OFF \
    -DLLDB_ENABLE_CURSES=OFF \
    -DLLDB_ENABLE_LIBXML2=ON \
    -DLLDB_ENABLE_LZMA=ON \
    -DLLVM_INCLUDE_EXAMPLES=OFF \
    -DLLVM_INCLUDE_BENCHMARKS=OFF \
    -DLLVM_APPEND_VC_REV=OFF \
    -DLLDB_VERSION_STRING="$(_llvm_pkgversion | _cmake_escape_semicolon)" \
    $(
      if [ -n "$CIDR_TEST_XML" ]; then
        echo -DLLVM_INCLUDE_TESTS=ON -DCIDR_TEST_XML=$CIDR_TEST_XML
      else
        echo -DLLVM_INCLUDE_TESTS=OFF
      fi
    ) \
    -DZLIB_ROOT="$PREFIX" \
    "$srcdir/$_llvm_repository_name/llvm"

  cmake --build . --verbose --target lldb lldb-argdumper lldb-dap lldb-server

  if [ -n "$CIDR_TEST_XML" ]; then
    # suppressing the exit code, as test results gonna be processed by teamcity, at least before the tests go stable
    cmake --build . --verbose --parallel --target check-lldb-xml ||:

    if [ ! -f "$CIDR_TEST_XML" ]; then
      echo "error: $CIDR_TEST_XML was not generated, probably something is wrong with test execution" >&2
      exit 1
    fi
  fi

  # # Disable automatic installation of components that go into subpackages
  # sed -i '/\(clang\|lld\|lldb\)\/cmake_install.cmake/d' tools/cmake_install.cmake
  # sed -i '/extra\/cmake_install.cmake/d' tools/clang/tools/cmake_install.cmake
  # sed -i '/compiler-rt\/cmake_install.cmake/d' projects/cmake_install.cmake
}

check() {
  cd "${srcdir}"/build-${CHOST}
  make check-{llvm,clang}
}

package() {
  cd "${srcdir}"/build-${CHOST}

  DESTDIR="$pkgdir" cmake --build . --verbose --target \
    install-{liblldb,lldb,lldb-dap,lldb-argdumper,lldb-server,lldb-python-scripts}

  # This resolves to something like ${PREFIX}/lib/python3.6/site-packages
  local python_site_packages=$(${PREFIX}/bin/python -c \
    'from distutils import sysconfig; print(sysconfig.get_python_lib(True, False));')

  # TeamCity doesn't handle symlinks in artifact dependencies;
  # replace symlink with empty shared object depending.
  local cc=${CC:-cc}
  $cc -nostdlib -shared -fPIC \
    -Wl,-rpath='$ORIGIN/../../..' \
    -Wl,--no-as-needed -L${pkgdir}${PREFIX}/lib -llldb \
    -o "${pkgdir}${python_site_packages}/lldb/_lldb.so"

  install -Dm644 "$srcdir/$_llvm_repository_name/llvm/LICENSE.TXT" \
    "${pkgdir}${PREFIX}/share/licenses/llvm/LICENSE"
  install -Dm644 "$srcdir/$_llvm_repository_name/lldb/LICENSE.TXT" \
    "${pkgdir}${PREFIX}/share/licenses/${pkgname}/LICENSE"
}
