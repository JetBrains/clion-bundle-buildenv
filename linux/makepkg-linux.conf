source $(dirname ${BASH_SOURCE})/../_makepkg-base.conf

OPTIONS=(strip !docs libtool !staticlibs !emptydirs zipman purge !upx debug)


LDFLAGS="-Wl,-O1,--sort-common,--as-needed,-z,relro -Wl,-rpath='@{ORIGIN}/../lib'"


save_function() {
    local orig_func newname_func
    orig_func=$(declare -f $1) || return $?
    newname_func="$2${orig_func#$1}"
    eval "$newname_func"
}

save_function tidy_install tidy_install_original
tidy_install() {
    tidy_install_original
    tidy_unsymlink
    tidy_chrpath
}

# https://stackoverflow.com/a/12498485/545027
relative_path() {
    # both $1 and $2 are absolute paths beginning with /
    # returns relative path to $2/$target from $1/$source
    local source="${1%%/}/"
    local target="${2%%/}/"
    [[ "$source" != /* ]] && source="$(pwd)/${source}"
    [[ "$target" != /* ]] && target="$(pwd)/${target}"

    common_part=$source # for now
    result="" # for now

    while [[ "${target#$common_part}" == "${target}" ]]; do
        # no match, means that candidate common part is not correct
        # go up one level (reduce common part)
        common_part="$(dirname $common_part)"
        # and record that we went back, with correct / handling
        if [[ -z $result ]]; then
            result=".."
        else
            result="../$result"
        fi
    done

    if [[ $common_part == "/" ]]; then
        # special case for root (no common path)
        result="$result/"
    fi

    # since we now have identified the common part,
    # compute the non-common part
    forward_part="${target#$common_part}"

    # and now stick all parts together
    if [[ -n $result ]] && [[ -n $forward_part ]]; then
        result="$result$forward_part"
    elif [[ -n $forward_part ]]; then
        # extra slash removal
        result="${forward_part#/}"
    fi

    echo "${result%/}"
}

tidy_unsymlink() {
    msg2 "$(gettext "Fixing up shared library symlinks...")"

    local symlink target new_target symlinks_to_fixup=()
    declare -A symlink_map
    local dir="$(pwd)"

    while read -rd '' symlink ; do
        case "$(file -Lbi "${symlink}")" in
            *application/x-sharedlib*) ;;  # Libraries (.so)
            *application/x-executable*) ;; # Binaries
            *)
                continue ;;
        esac
        target=$(readlink -e "${symlink}") || continue

        if [[ ${target} == ${symlink}* ]]; then
            # libfoo.so.1
            if [[ ${symlink}* =~ .*.so.[0-9]+ ]]; then
                symlink_map[${target}]="${symlink}"
            else
                symlinks_to_fixup+=("${symlink}")
            fi
        fi
    done < <(find -L "${dir}"${PREFIX}/lib -type f -xtype l -perm -u+w -print0 2>/dev/null)

    for symlink in "${symlinks_to_fixup[@]}"; do
        target=$(readlink -e "${symlink}") || continue
        new_target="${symlink_map[${target}]}"
        [[ -n "${new_target}" ]] || continue

        echo "ln: $(ln -vfs "$(relative_path "$(dirname "${symlink}")" "${new_target}")" "${symlink#${dir}/}")"
        # rm -vf "${symlink#${dir}/}"
    done

    for target in "${!symlink_map[@]}"; do
        new_target="${symlink_map[${target}]}"
        if [[ "${new_target}" == "${target}" ]]; then
            continue  # just in case
        fi

        echo "mv: $(mv -vf "${target#${dir}/}" "${new_target#${dir}/}")"
    done
}

tidy_chrpath() {
    msg2 "$(gettext "Patching RPATH of binaries and libraries...")"

    local binary
    find . -type f -perm -u+w -print0 2>/dev/null | while read -rd '' binary ; do
        case "$(file -bi "$binary")" in
            *application/x-sharedlib*) ;;  # Libraries (.so)
            *application/x-executable*) ;; # Binaries
            *)
                continue ;;
        esac
        local rpath_line old_rpath new_rpath
        rpath_line=$(chrpath -l "$binary" 2>/dev/null) || continue
        old_rpath="${rpath_line#*: RPATH=}"
        local origin='${ORIGIN}'
        new_rpath="${old_rpath//'@{ORIGIN}'/${origin}}"
        if [[ "${new_rpath}" == "${old_rpath}" ]]; then 
            continue
        fi
        chrpath -r "${new_rpath}" "${binary#./}" | grep "new RPATH"
    done
}

